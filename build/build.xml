<?xml version="1.0"?>
<project name="Prudence" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="custom.properties" />
	
	<property name="component.source" location="../components/${component}/source" />
	<property name="reference" location="../components/reference" />
	<property name="javascript-library" location="../components/prudence-javascript-library" />
	<property name="skeleton" location="../components/skeleton" />
	<property name="example" location="../components/example" />
	<property name="admin" location="../components/admin" />
	<property name="three-crickets-style" location="../components/three-crickets-style" />
	<property name="stickstick-common" location="../components/stickstick-common" />
	<property name="stickstick-javascript" location="../components/stickstick-javascript" />
	
	<property name="dependencies" location="../dependencies" />

	<property name="cache" location="./cache" />
	<property name="cache.classes" location="${cache}/classes" />
	<property name="cache.jars" location="${cache}/jars" />
	<property name="cache.api" location="${cache}/api" />
	<property name="cache.manual" location="${cache}/skeleton/reference/manuals/${maven.group}/${maven.artifact}/${version}" />
	<property name="cache.css" location="${cache}/three-crickets-style/libraries/web/style/three-crickets" />

	<property name="distribution" location="./distribution" />
	<property name="distribution.content" location="${distribution}/content" />
	
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${dependencies}/libraries/jars/org.apache.ivy/ivy/${ivy.version}/ivy.jar" />

	<target name="ivy" description="Settings for Ivy">
		<ivy:settings file="ivy/settings.xml" />
	</target>

	<target name="dependencies" depends="ivy" description="Resolve dependencies">
		<ivy:resolve file="ivy/${component}.xml" type="jar" log="download-only" resolveId="${component}" />
		<ivy:cachepath pathid="dependencies" type="jar" resolveId="${component}" />
	</target>

	<target name="classes" depends="dependencies" description="Compile Java code">
		<mkdir dir="${cache.classes}" />
		<javac srcdir="${component.source}" destdir="${cache.classes}" source="${jvm.version}" target="${jvm.version}" includeAntRuntime="no" debug="${compile.debug}">
			<classpath refid="dependencies" />
			<!--<compilerarg line="-Xlint" />-->
		</javac>
	</target>

	<target name="version">
		<mkdir dir="${cache.classes}" />
		<propertyfile file="${cache.classes}/com/threecrickets/prudence/version.conf">
			<entry key="version" value="${version}" />
			<entry key="built" type="date" value="now" pattern="MMM dd yyyy, HH:mm:ss, 'TZ'Z" />
		</propertyfile>
	</target>

	<target name="javadocs" description="Create API documentation if not present">
		<available file="${cache.api}" property="javadocs-present" />
		<antcall target="javadocs-overwrite" />
	</target>

	<target name="javadocs-overwrite" depends="dependencies" description="Create API documentation" unless="javadocs-present">
		<javadoc
			destdir="${cache.api}" sourcepath="${component.source}" excludepackagenames="**.internal.*"
			access="protected" source="${jvm.version}"
			windowtitle="${documentation.title} ${version}" doctitle="${documentation.title} ${version}"
			author="true" splitindex="true" use="true" version="true" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false">

			<link href="${jvm.docs}" />
			<link href="http://commons.apache.org/daemon/apidocs/" />
			<link href="http://commons.apache.org/dbcp/api-1.3/" />
			<link href="http://commons.apache.org/fileupload/apidocs/" />
			<link href="http://commons.apache.org/pool/api-1.5.7/" />
			<link href="http://www.sauronsoftware.it/projects/cron4j/api/" />
			<link href="http://groboutils.sourceforge.net/docs/projects/5/api/" />
			<link href="http://www.hazelcast.com/javadoc/" />
			<link href="http://www.h2database.com/javadoc/" />
			<link href="http://junit.sourceforge.net/javadoc/" />
			<!-- Jygments has no online javadocs -->
			<link href="http://api.mongodb.org/java/2.7.2/" />
			<link href="http://www.restlet.org/documentation/2.0/jse/api/" />
			<link href="http://threecrickets.com/scripturian/api/" />
			<link href="http://docs.oracle.com/cd/E17802_01/products/products/servlet/2.5/docs/servlet-2_5-mr2/" />
			<link href="http://dustin.github.com/java-memcached-client/apidocs/" />
			<link href="http://www.zkoss.org/javadoc/latest/zuss/" />
			<classpath refid="dependencies" />
			<bottom>
				<![CDATA[<i>${documentation.copyright}</i>]]>
			</bottom>
		</javadoc>
		<mkdir dir="${cache.jars}" />
		<jar destfile="${cache.jars}/javadoc.jar" basedir="${cache.api}" />
	</target>

	<target name="manual" description="Create manual if not present">
		<available file="${cache.manual}" property="manual-present" />
		<antcall target="manual-overwrite" />
	</target>
	
	<target name="clean-manual" description="Clean manual">
		<delete dir="${cache.manual}" />
	</target>

	<target name="manual-lyx" if="lyx">
		<exec executable="${lyx}" failifexecutionfails="false">
			<arg value="--export" />
			<arg value="pdf" />
			<arg value="${cache.manual}/${component}_manual.lyx" />
		</exec>
	</target>

	<target name="manual-elyxer" if="elyxer">
		<exec executable="${elyxer}" failifexecutionfails="false">
			<arg value="--unicode" />
			<arg value="--title" />
			<arg value="${documentation.title} Manual" />
			<arg value="--css" />
			<arg value="soft-cricket-api.css" />
			<arg value="${cache.manual}/${component}_manual.lyx" />
			<arg value="${cache.manual}/${component}_manual.html" />
		</exec>
	</target>

	<target name="manual-overwrite" description="Create manual" unless="manual-present">
		<mkdir dir="${cache.manual}" />
		<copy todir="${cache.manual}">
			<fileset dir="${reference}/manual" excludes="*~" />
		</copy>
		<replace dir="${cache.manual}" includes="${component}_manual.lyx" token="%VERSION%" value="${version}" />
		<antcall target="manual-lyx" />
		<antcall target="manual-elyxer" />
	</target>

	<target name="css" description="Create CSS">
		<mkdir dir="${cache.css}" />
		<java
			classpath="${dependencies}/libraries/jars/org.zkoss.zuss/zuss/1.0.0/zuss.jar"
			classname="org.zkoss.zuss.Zuss">
			<arg value="-o" />
			<arg value="${three-crickets-style}/libraries/web/style/three-crickets/soft-cricket.zuss" />
			<arg value="${cache.css}/soft-cricket-original.css" />
		</java>
	</target>

	<target name="libraries" depends="classes, version" description="Create jar">
		<mkdir dir="${cache.jars}" />
		<jar destfile="${cache.jars}/${maven.artifact}.jar" basedir="${cache.classes}" />
		<jar destfile="${cache.jars}/sources.jar" basedir="${component.source}" />
	</target>

	<target name="deploy" if="maven" description="Deploy to Maven repository">
		<exec executable="${maven}" dir="maven" failifexecutionfails="false">
			<arg value="deploy" />
			<arg value="-DaltDeploymentRepository=${maven.repo}" />
		</exec>
	</target>

	<target name="components" depends="libraries, javadocs, manual, css, deploy" description="Assemble components" />

	<target name="distribution" depends="components" description="Create Sincerity container">
		<copy todir="${distribution.content}/configuration/sincerity">
			<fileset dir="sincerity" />
		</copy>
		<exec executable="${sincerity.home}/sincerity">
			<arg value="container:create" />
			<arg value="--force" />
			<arg value="${distribution.content}" />
			<arg value="${sincerity.template}" />
			<arg value=":" />
			<arg value="repositories:attach" />
			<arg value="three-crickets" />
			<arg value=":" />
			<arg value="dependencies:install" />
		</exec>
	</target>

	<target name="package-zip" depends="distribution" description="Create zip distribution package">
		<zip destfile="${distribution}/${component}-${version}.zip">
			<zipfileset dir="${distribution.content}" excludes="cache/, logs/, sincerity" />
			<zipfileset dir="${distribution.content}" includes="sincerity" filemode="755" />
		</zip>
	</target>

	<target name="package-installbuilder" depends="distribution" description="Create InstallBuilder installer">
		<exec executable="${installbuilder}">
			<arg value="build" />
			<arg value="./installbuilder/${component}.xml" />
			<arg value="windows" />
			<arg value="--license" />
			<arg value="./installbuilder/license.xml" />
		</exec>
		<exec executable="${installbuilder}">
			<arg value="build" />
			<arg value="./installbuilder/${component}.xml" />
			<arg value="osx" />
			<arg value="--license" />
			<arg value="./installbuilder/license.xml" />
			<arg value="--setvars" />
			<arg value="project.outputDirectory=${cache}" />
		</exec>
		<zip destfile="${distribution}/${component}-${version}-osx-installer.zip">
			<zipfileset dir="${cache}/${component}-${version}-osx-installer.app" prefix="${component}-${version}-osx-installer.app" />
		</zip>
		<chmod perm="ugo+rx">
			<fileset dir="${distribution}" includes="*.run" />
		</chmod>
	</target>

	<target name="build" depends="distribution" description="Build distribution" />
	
	<target name="clean" description="Clean">
		<delete dir="${cache}" />
		<delete dir="${distribution}" />
	</target>
	
	<target name="rebuild" depends="clean, build" description="First clean and then build distribution" />

	<target name="dirty" description="Quick-and-dirty update of the content">
		<copy todir="${distribution.content}">
			<fileset dir="${skeleton}" />
			<fileset dir="${admin}" />
			<fileset dir="${example}" />
			<fileset dir="${javascript-library}" />
			<fileset dir="${stickstick-common}" />
			<fileset dir="${stickstick-javascript}" />
		</copy>
	</target>

</project>
