//
// Prudence Application Routing
//

import java.lang.ClassLoader
import java.io.File
import org.restlet.routing.Router
import org.restlet.routing.Redirector
import org.restlet.routing.Template
import org.restlet.resource.Finder
import org.restlet.resource.Directory
import com.threecrickets.scripturian.util.DefrostTask
import com.threecrickets.scripturian.document.DocumentFileSource
import com.threecrickets.prudence.util.PrudenceRouter
import com.threecrickets.prudence.util.PreheatTask
import com.threecrickets.prudence.util.PhpExecutionController

classLoader = ClassLoader.systemClassLoader

//
// Utilities
//

// Makes sure we have slashes where we expect them
fixURL = { url ->
	url = (url =~ /\/\//).replaceAll('/') // no doubles
	if(url.size() > 0 && url[0] == '/') { // never at the beginning
		url = url.substring(1)
	}
	if(url.size() > 0 && url[url.size() - 1] != '/') { // always at the end
		url += '/'
	}
	return url
}

//
// Internal router
//

componentInstance.internalRouter.attach('/' + applicationInternalName + '/', applicationInstance).matchingMode = Template.MODE_STARTS_WITH

//
// Hosts
//
// Note that the application's context will not be created until we attach the application to at least one
// virtual host. See defaults/instance/hosts.gv for more information.
//

addTrailingSlash = new Redirector(applicationInstance.context, '{ri}/', Redirector.MODE_CLIENT_PERMANENT)

print(applicationInstance.name + ': ')
hosts.eachWithIndex() { entry, i ->
	host = entry[0]
	url = entry[1]
	if(!url) {
		url = applicationDefaultURL
	}
	print('"' + url + '" on ' + host.name)
	host.attach(url, applicationInstance).matchingMode = Template.MODE_STARTS_WITH
	if(url != '/') {
		if(url[url.size() - 1] == '/') {
			url = url.substring(0, url.size() - 1)
		}
		host.attach(url, addTrailingSlash).matchingMode = Template.MODE_EQUALS
	}
	if(i < hosts.size() - 1) {
		print(', ')
	}
}
println('.')
out.flush()

attributes = applicationInstance.context.attributes

attributes['componentInstance'] = componentInstance
cache =  component.context.attributes['com.threecrickets.prudence.cache']
if(cache) {
	attributes['com.threecrickets.prudence.cache'] = cache
}

//
// Inbound root
//

router = new PrudenceRouter(applicationInstance.context)
router.routingMode = Router.MODE_BEST_MATCH
applicationInstance.inboundRoot = router

//
// Add trailing slashes
//

for(url in urlAddTrailingSlash) {
	url = fixURL(url)
	if(url.size() > 0) {
		if(url[url.size() - 1] == '/') {
			// Remove trailing slash for pattern
			url = url.slice(0, -1)
		}
		router.attach(url, addTrailingSlash)
	}
}

//
// Dynamic web
//

languageManager = executable.manager
dynamicWebDocumentSource = new DocumentFileSource(applicationBasePath + dynamicWebBasePath, dynamicWebDefaultDocument, dynamicWebMinimumTimeBetweenValidityChecks)
attributes['com.threecrickets.prudence.GeneratedTextResource.languageManager'] = languageManager
attributes['com.threecrickets.prudence.GeneratedTextResource.defaultLanguageTag'] = 'groovy'
attributes['com.threecrickets.prudence.GeneratedTextResource.defaultName'] = dynamicWebDefaultDocument
attributes['com.threecrickets.prudence.GeneratedTextResource.documentSource'] = dynamicWebDocumentSource
attributes['com.threecrickets.prudence.GeneratedTextResource.sourceViewable'] = dynamicWebSourceViewable
attributes['com.threecrickets.prudence.GeneratedTextResource.executionController'] = new PhpExecutionController() // Adds PHP predefined variables

dynamicWeb = new Finder(applicationInstance.context, classLoader.loadClass('com.threecrickets.prudence.GeneratedTextResource'))
router.attachBase(fixURL(dynamicWebBaseURL), dynamicWeb)

if(dynamicWebDefrost) {
	defrostTasks = DefrostTask.forDocumentSource(dynamicWebDocumentSource, languageManager, 'groovy', true, true)
	for(defrostTask in defrostTasks) {
		tasks.push(defrostTask)
	}
}

//
// Static web
//

staticWeb = new Directory(applicationInstance.context, new File(applicationBasePath + staticWebBasePath).toURI().toString())
staticWeb.listingAllowed = staticWebDirectoryListingAllowed
staticWeb.negotiatingContent = true
router.attachBase(fixURL(staticWebBaseURL), staticWeb)

//
// Resources
//

resourcesDocumentSource = new DocumentFileSource(applicationBasePath + resourcesBasePath, resourcesDefaultName, resourcesMinimumTimeBetweenValidityChecks)
attributes['com.threecrickets.prudence.DelegatedResource.languageManager'] = languageManager
attributes['com.threecrickets.prudence.DelegatedResource.defaultLanguageTag'] = 'groovy'
attributes['com.threecrickets.prudence.DelegatedResource.defaultName'] = resourcesDefaultName
attributes['com.threecrickets.prudence.DelegatedResource.documentSource'] = resourcesDocumentSource
attributes['com.threecrickets.prudence.DelegatedResource.sourceViewable'] = resourcesSourceViewable

resources = new Finder(applicationInstance.context, classLoader.loadClass('com.threecrickets.prudence.DelegatedResource'))
router.attachBase(fixURL(resourcesBaseURL), resources)

if(resourcesDefrost) {
	defrostTasks = DefrostTask.forDocumentSource(resourcesDocumentSource, languageManager, 'groovy', false, true)
	for(defrostTask in defrostTasks) {
		tasks.push(defrostTask)
	}
}

//
// SourceCode
//

if(showDebugOnError) {
	attributes['com.threecrickets.prudence.SourceCodeResource.documentSources'] = [dynamicWebDocumentSource, resourcesDocumentSource]
	sourceCode = new Finder(applicationInstance.context, classLoader.loadClass('com.threecrickets.prudence.SourceCodeResource'))
	router.attach(fixURL(showSourceCodeURL), sourceCode).matchingMode = Template.MODE_EQUALS
}

//
// Preheat
//

if(dynamicWebPreheat) {
	preheatTasks = PreheatTask.forDocumentSource(dynamicWebDocumentSource, componentInstance.context, applicationInternalName)
	for(preheatTask in preheatTasks) {
		tasks.push(preheatTask)
	}
}

for(preheatResource in preheatResources) {
	tasks.push(new PreheatTask(componentInstance.context, applicationInternalName, preheatResource))
}
