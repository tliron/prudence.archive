//
// Prudence Component
//

import java.lang.System
import java.lang.Runtime
import java.io.FileNotFoundException
import java.util.logging.LogManager
import java.util.concurrent.Executors
import org.restlet.Component
import com.threecrickets.prudence.util.DelegatedStatusService
import com.threecrickets.prudence.util.MessageTask

includeOrDefault = { name, deflt = null ->
	try {
		document.container.include(name)
	} catch(FileNotFoundException) {
		if(!deflt) {
			deflt = 'defaults/' + name
		}
		document.container.include(deflt)
	}
}

tasks = []

//
// Version
//

prudenceVersion = '1.0'
prudenceRevision = '-%REVISION%'
if(prudenceRevision.size() == 1) {
	prudenceRevision = ''
}
prudenceFlavor = 'Groovy'

//
// Welcome
//

println('Prudence ' + prudenceVersion + prudenceRevision + ' for ' + prudenceFlavor + '.')

//
// Component
//

component = new Component()
component.context.attributes.put('prudence.version', prudenceVersion)
component.context.attributes.put('prudence.revision', prudenceRevision)
component.context.attributes.put('prudence.flavor', prudenceFlavor)

//
// Logging
//

// log4j: This is our actual logging engine
try {
	importClass(org.apache.log4j.PropertyConfigurator)
	PropertyConfigurator.configure('configuration/logging.conf')
} catch(x) {}

// JULI: Remove any pre-existing configuration
LogManager.logManager.reset()

// JULI: Bridge to SLF4J, which will use log4j as its engine 
try {
	importClass(org.slf4j.bridge.SLF4JBridgeHandler)
	SLF4JBridgeHandler.install()
} catch(x) {}

// Set Restlet to use SLF4J, which will use log4j as its engine
System.setProperty('org.restlet.engine.loggerFacadeClass', 'org.restlet.ext.slf4j.Slf4jLoggerFacade')

// Velocity logging
System.setProperty('com.sun.script.velocity.properties', 'configuration/velocity.conf')

// Web requests
component.logService.loggerName = 'web-requests'

//
// StatusService
//

component.statusService = new DelegatedStatusService()

//
// Executor
//

executor = Executors.newFixedThreadPool(Runtime.runtime.availableProcessors())
component.context.attributes.put('prudence.executor', executor)

//
// Clients
//

includeOrDefault('instance/clients')

//
// Routing
//

includeOrDefault('instance/routing')

//
// Servers
//

includeOrDefault('instance/servers')

//
// Start
//

component.start()

//
// Tasks
//

if(tasks.size() > 0) {
	executor.submit(new MessageTask(component.context, 'Executing ' + tasks.size() + ' tasks...'))
	for(task in tasks) {
		executor.submit(task)
	}
	executor.submit(new MessageTask(component.context, 'Finished tasks.'))
}
