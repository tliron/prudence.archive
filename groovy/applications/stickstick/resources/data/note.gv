
prudence.include('../libraries/stickstick/data/')

import java.lang.System
import org.json.JSONObject

merge = { key, a, b ->
	if(!a.containsKey(key)) {
		return b[key]
	}
	else {
		return a[key]
	}
}

getId = {
    try {
        return Integer.parseInt(prudence.resource.request.attributes.id)
    }
    catch(Exception) {
    	return null
    }

    //def form = prudence.resource.request.resourceRef.queryAsForm
    //return Integer.valueOf(form.getFirstValue('id'))
}

handleInit = {
    prudence.addMediaTypeByName('text/plain')
    prudence.addMediaTypeByName('application/json')
}

handleGet = {
	def id = getId()
	
    def note
    def connection = getConnection()
    try {
        note = getNote(id, connection)
        if(note == null) {
        	return 404
        }
    }
    finally {
    	connection.close()
    }

    prudence.modificationTimestamp = note.timestamp
    note.remove('timestamp')
    return new JSONObject(note)
}

handleGetInfo = {
	def id = getId()
	
    def note
    def connection = getConnection()
    try {
        note = getNote(id, connection)
        if(note == null) {
        	return null
        }
    }
    finally {
    	connection.close()
    }

    return note.timestamp
}

handlePost = {
	def id = getId()

    // Note: You can only "consume" the entity once, so if we want it
    // as text, and want to refer to it more than once, we should keep
    // a reference to that text.
    
    def text = prudence.entity.text
    def entity = new JSONObject(text)
    def note = [:]
	for(def key in entity.keys()) {
		note[key] = entity.get(key)
	}

    def connection = getConnection()
    try {
        def existing = getNote(id, connection)
        if(existing == null) {
        	return 404
        }
        note = [
        	id: id,
        	board: merge('board', note, existing),
        	x: merge('x', note, existing),
        	y: merge('y', note, existing),
        	size: merge('size', note, existing),
        	content: merge('content', note, existing)
        ]
        updateNote(note, connection)
        updateBoardTimestamp(note, connection)
    }
    finally {
    	connection.close()
    }

    prudence.modificationTimestamp = note.timestamp
    note.remove('timestamp')
    return new JSONObject(note)
}

handleDelete = {
	def id = getId()

    def connection = getConnection()
    try { 
        def note = getNote(id, connection)
        if(note == null) {
        	return 404
        }
        deleteNote(note, connection)
        updateBoardTimestamp(note, connection, System.currentTimeMillis())
    }
    finally {
    	connection.close()
    }

    return null
}
