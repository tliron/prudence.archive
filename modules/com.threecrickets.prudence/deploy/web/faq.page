<% script.cacheDuration = 5000; var prudenceDemoBasePath = script.meta.get('prudenceDemoBasePath'); %><%& prudenceDemoBasePath + 'header.fragment' %>

<h2>Frequently Asked Questions</h2>

<h3>How well does Prudence perform? How well does it scale?</h3>
<p>
There are at least three aspects to this:
</p>

<h4>1. Serving HTTP</h4>
<p>
Prudence comes with <a href="https://grizzly.dev.java.net/">Grizzly</a>,
an HTTP server based on Java's non-blocking I/O API. Grizzly handles concurrent HTTP
requests very well, and serves static files at scales comparable to
popular HTTP servers.
</p><p>
Grizzly can be replaced with <a href="http://www.mortbay.org/jetty/">Jetty</a>,
which offers similar performance with more features, or any other connector supported
by <a href="http://www.restlet.org/">Restlet</a>. 
</p>

<h4>2. Generating HTML and other text</h4>
<p>
Prudence supports two modes for generating text, each with its own performance characteristics:
</p><p>
<i>Caching mode:</i> First, the entire script is run, with its output sent into a buffer. This buffer is then cached, and <i>only then</i> sent to the client. This is the default mode and
recommended for most scripts. Scripts can control the duration of their individual cache.  
</p><p>
<i>Streaming mode:</i> Output is sent to the client <i>while</i> the script runs. This is recommended for scripts that need to output a very large amount of text, which might take a long time,
or that might otherwise encounter slow-downs while running. In either case, you want the client to receive ongoing output. The output of the script is not cached.
</p><p>
Scripts can switch between modes according to changing circumstances. For example, to increase caching duration during heavy loads, to decrease it during periods where data changes often,
or to stream in the case of an expected large output.
</p>

<h4>3. Running scripts</h4>
<p>
There may be a delay when using a scripting engine for the first time in an application, as it loads and initializes itself.
Also, each page or resource might require compilation during its first use. Once they're up and running, though, they can
perform and scale very well. Furthermore, the Java virtual machine learns and adapts as it runs, and performance can improve
the more the application is used. 
</p><p>
Exact performance characteristics depend on the language and engine used. For many uses, these differences are
insignificant. However, if your application requires heavy computation work, performance can be an issue. 
The <a href="http://shootout.alioth.debian.org/">Bechmarks Game</a> can
give you some comparisons of different scripting engines running high-computation programs.
In any case, if you have a piece of intensive code that really needs to perform well, it's probably best to write
it in Java and access it from the script. You can even write it in C or assembly, and have it linked to Java via JNI.
</p> 


<%& prudenceDemoBasePath + 'footer.fragment' %>